// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4632.RobotCode2019v2.subsystems;


import org.usfirst.frc4632.RobotCode2019v2.Robot;
import org.usfirst.frc4632.RobotCode2019v2.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

public class ClimberDrive extends Subsystem {

    public static final double slow = 0.3;
    public static final double normal = 0.5;
    public static final double fast = 0.8;

    private WPI_VictorSPX left;
    private WPI_VictorSPX right;
    private DifferentialDrive differentialDrive1;


    public ClimberDrive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        left = new WPI_VictorSPX(6);
        right = new WPI_VictorSPX(7);
        
        
        
        differentialDrive1 = new DifferentialDrive(left, right);
        addChild("Differential Drive 1",differentialDrive1);
        differentialDrive1.setSafetyEnabled(false);
        differentialDrive1.setExpiration(0.1);
        differentialDrive1.setMaxOutput(1.0);

    }

    @Override
    public void initDefaultCommand() {

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

        
        if ( Robot.DEBUG ) {
            System.out.println("Starting ClimberDrive");
        }

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void arcade(double speed, double direction) {

        /* Takes parameters and sets direction */
        this.differentialDrive1.arcadeDrive(speed, direction);

    }
}
