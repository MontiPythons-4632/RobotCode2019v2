// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4632.RobotCode2019v2.subsystems;


import org.usfirst.frc4632.RobotCode2019v2.Robot;
import org.usfirst.frc4632.RobotCode2019v2.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import org.usfirst.frc4632.RobotCode2019v2.subsystems.Elevator;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Elevator extends Subsystem {

    public static final double slow = 0.6;
    public static final double normal = 0.8;
    public static final double fast = 1.0;
 
    private Spark bottom;
    private Spark top;
    private int currentTopPosition;
    private int currentBottomPosition;

    public enum Direction {
        Up(1),
        Down(-1)
        ;

        private final int directionMultiplier;

        private Direction(int multiplier) {
            this.directionMultiplier = multiplier;
        }

        public int getDirectionMultiplier() {
            return this.directionMultiplier;
        }

    }

    public Elevator() {
        bottom = new Spark(1);
        addChild("Bottom",bottom);
        bottom.setInverted(false);
        
        top = new Spark(2);
        addChild("Top",top);
        top.setInverted(false);

        this.currentTopPosition = 0;
        this.currentBottomPosition = 0;
    }

    @Override
    public void initDefaultCommand() {
     
        // Set the default command for a subsystem here.
        //setDefaultCommand(new ElevatorPosition(1));
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        if ( Robot.DEBUG ) {
            System.out.println("Starting Elevator");
        }


    }

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void setCurrentTopPosition(int position) {
        this.currentTopPosition = position;
        // System.out.println("setCurrentElevatorTop: " + position);
        SmartDashboard.putNumber("ElevatorTopPosition", position);

    }

    public void setCurrentBottomPosition(int position) {
        this.currentBottomPosition = position;
        SmartDashboard.putNumber("ElevatorBottomPosition", position);

    }

    public int getCurrentTopPosition() {
        return this.currentTopPosition;
    }

    public int getCurrentBottomPosition() {
        return this.currentBottomPosition;
    }

 //   public void moveBottom(double speed, Direction direction) {
     public void moveBottom(double speed, int direction) {
        // System.out.println("speed: " + speed);
        // System.out.println("direction: " + direction.getDirectionMultiplier());
        SmartDashboard.putNumber("MoveBottomSpeed", speed);
        SmartDashboard.putNumber("MoveBottomDirection", direction);


        this.bottom.set(speed * direction);
    }

    // public void moveTop(double speed, Direction direction) {
    public void moveTop(double speed, double direction) {

        // System.out.println("speed: " + speed);
        // System.out.println("direction: " + direction.getDirectionMultiplier());
        SmartDashboard.putNumber("MoveTopSpeed", speed);
        SmartDashboard.putNumber("MoveTopDirection", direction);

        this.top.set(speed * direction);
    }

    public void holdPosition() {
        this.bottom.set(0.5);
    
    }

}

