// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4632.RobotCode2019v2.subsystems;

import org.usfirst.frc4632.RobotCode2019v2.Robot;
import org.usfirst.frc4632.RobotCode2019v2.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.DoubleSolenoid;



/**
 *
 */
public class ClimberLift extends Subsystem {

    private DoubleSolenoid front;
    private DoubleSolenoid back;
    private DoubleSolenoid dummy1;
    private DoubleSolenoid dummy2;

    public enum RobotStates {
        Up,
        Down,
        Moving
    }
    private RobotStates frontCurrentState = RobotStates.Down;
    private RobotStates frontDesiredState = RobotStates.Down;
    private RobotStates backCurrentState = RobotStates.Down;
    private RobotStates backDesiredState = RobotStates.Down;

    public ClimberLift() {
        front = new DoubleSolenoid(5, 0, 1);
        addChild("Front",front);
        
        back = new DoubleSolenoid(5, 2, 3);
        addChild("Back",back);
        
        // dummy1 = new DoubleSolenoid(5, 4, 5);
        // addChild("dummy1",dummy1);

        // dummy2 = new DoubleSolenoid(5, 6, 7);
        // addChild("dummy2",dummy2);

    }

    @Override
    public void initDefaultCommand() {
     
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());

    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        if ( Robot.DEBUG ) {
            System.out.println("Starting ClimberLift");
        }


        // Check to see if there is a change in state for the Back piston
        // if ( this.backDesiredState != this.backCurrentState ) {
        //         System.out.println("Change Back State");
        //     switch (this.backDesiredState) {
        //     case Up:
        //         this.back.set(Value.kForward);
        //     case Down:
        //         this.back.set(Value.kReverse);
        //     default:
        //         System.out.println("No value for back");
        //     }
        //     this.backCurrentState = this.backDesiredState;

        // }

        // Check id there is a change in state for the FrontPiston
        // if ( this.frontDesiredState != this.frontCurrentState ) {
        //     System.out.println("Change Front State");

        //     switch (this.frontDesiredState) {
        //     case Up:
        //         this.front.set(Value.kForward);
        //     case Down:
        //         this.front.set(Value.kReverse);
        //     default:
        //         System.out.println("No value for front");
        //     }
        //     this.backCurrentState = this.frontDesiredState;
        // }   

    }

   
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void raiseRobot() {

        this.raiseFront();
        this.raiseBack();
    }

    public void lowerRobot() {
        this.lowerFront();
        this.lowerBack();
    }

    public void raiseFront() {
         this.frontDesiredState = RobotStates.Up;
         this.front.set(Value.kForward);
         this.frontCurrentState = this.frontDesiredState;

    }
    public void raiseBack() {
        this.backDesiredState = RobotStates.Up;
        this.back.set(Value.kForward);
        this.backCurrentState = this.backDesiredState;
    }

    public void lowerFront() {
        this.frontDesiredState = RobotStates.Down;
        this.front.set(Value.kReverse);
        this.frontCurrentState = this.frontDesiredState;
    }

    public void lowerBack() {
        this.backDesiredState = RobotStates.Down;
        this.back.set(Value.kReverse);
        this.backCurrentState = this.backDesiredState;

    }

    public void holdAll() {
        this.lowerFront();
        this.lowerBack();
        this.dummy1.set(Value.kReverse);
        this.dummy2.set(Value.kReverse);
    }

    public RobotStates frontState() {
        return this.frontCurrentState;
    }
 
    public RobotStates backState() {
        return this.backCurrentState;
    }
}

