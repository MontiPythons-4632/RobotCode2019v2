// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4632.RobotCode2019v2.subsystems;

import org.usfirst.frc4632.RobotCode2019v2.Robot;
import org.usfirst.frc4632.RobotCode2019v2.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.DoubleSolenoid;



/**
 *
 */
public class ClimberLift extends Subsystem {

    private DoubleSolenoid front;
    private DoubleSolenoid back;
 
    public enum RobotStates {
        Extended,
        Retracted
    }
    private RobotStates frontCurrentState = RobotStates.Retracted;
    private RobotStates frontDesiredState = RobotStates.Retracted;
    private RobotStates backCurrentState = RobotStates.Retracted;
    private RobotStates backDesiredState = RobotStates.Retracted;

    public ClimberLift() {
        front = new DoubleSolenoid(5, 0, 1);
        addChild("Front",front);
        
        back = new DoubleSolenoid(5, 2, 3);
        addChild("Back",back);

    }

    @Override
    public void initDefaultCommand() {
     
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());

    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        if ( Robot.DEBUG ) {
            System.out.println("Starting ClimberLift");
        }

    }

   
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    // public void raiseRobot() {

    //     this.raiseFront();
    //     this.raiseBack();
    // }

    // public void lowerRobot() {
    //     this.lowerFront();
    //     this.lowerBack();
    // }

    public void extendFront() {
        // this.frontDesiredState = RobotStates.Extended;
         this.front.set(Value.kForward);
         this.frontCurrentState = RobotStates.Extended;

    }
    public void extendBack() {
        //this.backDesiredState = RobotStates.Extended;
        this.back.set(Value.kForward);
        this.backCurrentState = RobotStates.Extended;
    }

    public void retractFront() {
        //this.frontDesiredState = RobotStates.Retracted;
        this.front.set(Value.kReverse);
        this.frontCurrentState = RobotStates.Retracted;
    }

    public void retractBack() {
        //this.backDesiredState = RobotStates.Retracted;
        this.back.set(Value.kReverse);
        this.backCurrentState = RobotStates.Retracted;

    }

    // public void holdAll() {
    //     this.lowerFront();
    //     this.lowerBack();
    //     this.dummy1.set(Value.kReverse);
    //     this.dummy2.set(Value.kReverse);
   // }

    public RobotStates getFrontState() {
        return this.frontCurrentState;
    }
 
    public RobotStates getBackState() {
        return this.backCurrentState;
    }
}

