// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4632.RobotCode2019v2.subsystems;


import org.usfirst.frc4632.RobotCode2019v2.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Pinchie extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // Used to specify the state of the claw
    public enum ClawPositions {
        Open,
        Closed
    }

    // Used to specify where the arm is
    public enum PinchiePositions {
        Extended,
        Retracted
    }

    // Claw States
    private ClawPositions clawCurrentPosition;
    private ClawPositions clawDesiredPosition;

    // Pinchie Position
    private PinchiePositions pinchieCurrentPosition;
    private PinchiePositions pinchieDesiredPosition;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DoubleSolenoid pinchie;
    private DoubleSolenoid claw;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Pinchie() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        pinchie = new DoubleSolenoid(5, 4, 5);
        addChild("Pinchie",pinchie);
        claw = new DoubleSolenoid(5, 6, 7);
        addChild("Claw",claw);     

    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

        if ( this.clawDesiredPosition != this.clawCurrentPosition ) {
            switch (this.clawDesiredPosition) {
            case Open:
                this.claw.set(Value.kForward);
            case Closed:
                this.claw.set(Value.kReverse);
            default:
                System.out.println("No value for claw");
            }
            this.clawCurrentPosition = this.clawDesiredPosition;
            SmartDashboard.putString("Claw Position", this.clawPositionString());
        }

        if ( this.pinchieDesiredPosition != this.pinchieCurrentPosition ) {
            switch (this.pinchieDesiredPosition) {
            case Extended:
                this.claw.set(Value.kForward);
            case Retracted:
                this.claw.set(Value.kReverse);
            default:
                System.out.println("No value for claw");
            }
            this.pinchieCurrentPosition = this.pinchieDesiredPosition;
            SmartDashboard.putString("Pinchie Position", this.pinchiePositionString());

        }


    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void openClaw() {
        this.clawDesiredPosition = ClawPositions.Open;
    }

    public void closeClaw() {
        this.clawDesiredPosition = ClawPositions.Closed;
    }

    public void extendPinchie() {
        this.pinchieDesiredPosition = PinchiePositions.Extended;
    }

    public void retractPinchie() {
        this.pinchieDesiredPosition = PinchiePositions.Retracted;
    }

    public String clawPositionString() {

            switch (this.clawCurrentPosition) {
                case Open:
                    return "Open";
                case Closed:   
                    return "Closed";
                default: 
                    return "Unknown";
            }
    }

    public String pinchiePositionString() {

        switch (this.pinchieCurrentPosition) {
            case Extended:
                return "Extended";
            case Retracted:   
                return "Retracted";
            default: 
                return "Unknown";
        }
}
}

