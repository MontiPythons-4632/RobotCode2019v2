// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4632.RobotCode2019v2.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4632.RobotCode2019v2.Robot;
import org.usfirst.frc4632.RobotCode2019v2.subsystems.Elevator;

/**
 *
 */
public class ElevatorPosition extends Command {

    private int targetPosition;
    private int targetTopPosition = 0;
    private int targetBottomPosition = 0;

    public ElevatorPosition(int target) {

        requires(Robot.elevator);

        this.targetPosition = target;
  
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {

        System.out.println("Initialize Elevator Position to "+ this.targetPosition);
        double runtime = 1.0;

        switch(this.targetPosition) {
            case 1:
                this.targetTopPosition = 0;
                this.targetBottomPosition = 0;
                break;
            case 2:
                this.targetTopPosition = 0;
                this.targetBottomPosition = 1;  
                break;
            case 3:
                this.targetTopPosition = 1;
                this.targetBottomPosition = 1;  
                break;
            default:
                this.targetTopPosition = 0;
                this.targetBottomPosition = 0;
        };
     
        System.out.println("Setting target top to: " + this.targetTopPosition);
            setTimeout(runtime);
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
  
        int currentTopPosition = Robot.elevator.getCurrentTopPosition();
        int currentBottomPosition = Robot.elevator.getCurrentBottomPosition();

        if ( this.targetTopPosition > currentTopPosition ) {
            Robot.elevator.moveTop(0.9, Elevator.Direction.Up);
        } else if ( this.targetTopPosition < currentTopPosition ) {
            Robot.elevator.moveTop(0.9, Elevator.Direction.Down);
        }

        if ( this.targetBottomPosition > currentBottomPosition ) {
            Robot.elevator.moveBottom(0.9, Elevator.Direction.Up);
        } else  if ( this.targetBottomPosition < currentBottomPosition ) {
            Robot.elevator.moveBottom(0.9, Elevator.Direction.Down);
        }

        if ( currentBottomPosition != 0){
            Robot.elevator.holdPosition();

        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return isTimedOut();
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        System.out.println("Done Elevator Position: " + this.targetPosition);

        Robot.elevator.setCurrentBottomPosition(this.targetBottomPosition);
        Robot.elevator.setCurrentTopPosition(this.targetTopPosition);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
